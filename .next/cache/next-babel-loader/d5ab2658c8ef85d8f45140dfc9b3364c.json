{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/adesegunadedeji/Documents/blairbnb.com/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Link from 'next/link';\nimport Layout from '../comps/Layout';\nimport fetch from 'isomorphic-unfetch';\n\nvar Index = function Index(props) {\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, \"Lets Watch Batman\"), __jsx(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, props.shows.map(function (show) {\n    return __jsx(\"li\", {\n      key: show.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, __jsx(Link, {\n      href: \"/p/[id]\",\n      as: \"/p/\".concat(show.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, show.name)));\n  })));\n};\n\nIndex.getInitialProps = function _callee() {\n  var res, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://api.tvmaze.com/search/shows?q=batman'));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          data = _context.sent;\n          console.log(\"Show  fetch data, Count: \".concat(data.score));\n          console.log(data);\n          return _context.abrupt(\"return\", {\n            shows: data.map(function (entry) {\n              return entry.show;\n            })\n          });\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/adesegunadedeji/Documents/blairbnb.com/pages/index.js"],"names":["Link","Layout","fetch","Index","props","shows","map","show","id","name","getInitialProps","res","json","data","console","log","score","entry"],"mappings":";;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,KAAK;AAAA,SAEf,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCA,KAAK,CAACC,KAAN,CAAYC,GAAZ,CAAgB,UAAAC,IAAI;AAAA,WACjB;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,SAAX;AAAqB,MAAA,EAAE,eAASD,IAAI,CAACC,EAAd,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAID,IAAI,CAACE,IAAT,CADA,CADJ,CADiB;AAAA,GAApB,CADD,CAFJ,CAFe;AAAA,CAAnB;;AAgBAN,KAAK,CAACO,eAAN,GAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACFR,KAAK,CAAC,8CAAD,CADH;;AAAA;AACdS,UAAAA,GADc;AAAA;AAAA,2CAEDA,GAAG,CAACC,IAAJ,EAFC;;AAAA;AAEdC,UAAAA,IAFc;AAGpBC,UAAAA,OAAO,CAACC,GAAR,oCAAwCF,IAAI,CAACG,KAA7C;AACAF,UAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAJoB,2CAKb;AACHR,YAAAA,KAAK,EAAEQ,IAAI,CAACP,GAAL,CAAS,UAAAW,KAAK;AAAA,qBAAEA,KAAK,CAACV,IAAR;AAAA,aAAd;AADJ,WALa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAUA,eAAeJ,KAAf","sourcesContent":["import Link from 'next/link'\nimport Layout from '../comps/Layout'\nimport fetch from 'isomorphic-unfetch'\n\nconst Index = props =>(\n\n    <Layout>\n        <h1>Lets Watch Batman</h1>\n        <ul>\n        {props.shows.map(show => (\n            <li key={show.id}>\n                <Link href=\"/p/[id]\" as ={`/p/${show.id}`}>\n                <a>{show.name}</a>\n                    </Link>\n            </li>\n            ))}\n        </ul>\n    </Layout>\n);\n\nIndex.getInitialProps = async function () {\n    const res = await fetch('https://api.tvmaze.com/search/shows?q=batman')\n    const data = await res.json()\n    console.log(`Show  fetch data, Count: ${data.score}`)\n    console.log(data)\n    return {\n        shows: data.map(entry=>entry.show)\n    }\n};\n\nexport default Index\n"]},"metadata":{},"sourceType":"module"}